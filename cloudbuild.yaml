steps:
# This step decrypts the machine account's SSH key
- name: 'gcr.io/cloud-builders/gcloud'
  id: Decrypt tamuhack.staging SSH key
  args:
  - kms
  - decrypt
  - --ciphertext-file=tamuhack.staging.id_rsa.enc
  - --plaintext-file=/root/.ssh/id_rsa
  - --location=global
  - --keyring=tamuhack-staging-acct
  - --key=ssh
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# This step sets up git using the decrypted SSH key and domain
- name: 'gcr.io/cloud-builders/git'
  id: Set up git using decrypted SSH key and domain
  entrypoint: 'bash'
  args:
  - '-c'
  - |
    chmod 600 /root/.ssh/id_rsa
    cat <<EOF >/root/.ssh/config
    Hostname github.com
    IdentityFile /root/.ssh/id_rsa
    EOF
    mv known_hosts /root/.ssh/known_hosts
  volumes:
  - name: 'ssh'
    path: /root/.ssh

# This step deploys the new version of our container image
# in the ouroboros Kubernetes Engine cluster.
- name: 'gcr.io/cloud-builders/kubectl'
  id: Deploy
  args:
  - 'apply'
  - '-f'
  - 'kubernetes.yaml'
  env:
  - 'CLOUDSDK_COMPUTE_ZONE=us-central1-a'
  - 'CLOUDSDK_CONTAINER_CLUSTER=ouroboros'

# This step copies the applied manifest to the production branch
# The COMMIT_SHA variable is automatically
# replaced by Cloud Build.
- name: 'gcr.io/cloud-builders/git'
  id: Copy to production branch
  entrypoint: /bin/sh
  args:
  - '-c'
  - |
    set -x && \
    git remote add github git@github.com:tamuhack-org/snakeskin && \
    # Configure Git to create commits with TAMUhack staging
    git config user.email tamuhack.staging@gmail.com && \
    # Switch to the production branch and copy the kubernetes.yaml file from the candidate branch
    git fetch github production && git checkout production && \
    git checkout $COMMIT_SHA kubernetes.yaml && \
    # Commit the kubernetes.yaml file with a descriptive commit message
    git commit -m "Manifest from commit $COMMIT_SHA
    $(git log --format=%B -n 1 $COMMIT_SHA)" && \
    # Push the changes back to GitHub
    git push github production
  volumes:
  - name: 'ssh'
    path: /root/.ssh